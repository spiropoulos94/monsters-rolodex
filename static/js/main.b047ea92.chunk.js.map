{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/cardlist.component.jsx","components/searchbox/searchbox.component.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","key","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","data","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAaeA,G,kBAVF,SAACC,GACV,OACI,yBAAKC,UAAW,kBACZ,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,wBAAIC,IAAKN,EAAMI,QAAQC,IAAKL,EAAMI,QAAQG,MAC1C,2BAAIP,EAAMI,QAAQI,UCQfC,EAXE,SAACT,GAEd,OACI,yBAAKC,UAAW,aACXD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OACvB,kBAAC,EAAD,CAAME,IAAKF,EAAQC,GAAID,QAASA,SCCjCQ,G,MARG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACI,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAC9CG,SAAUF,MCsDVG,E,kDAnDX,aAAe,IAAD,8BACV,gBA2BJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA1BrC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IALP,E,gEAsBO,IAAD,OAChBI,MA3BI,6CA4BCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAQrC,IAAD,EAE2BC,KAAKN,MAA9Bb,EAFF,EAEEA,SAAUU,EAFZ,EAEYA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAAIA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OACI,yBAAK/B,UAAU,OACX,iDACA,kBAAC,EAAD,CACIY,YAAY,sBACZC,aAAce,KAAKf,eAEvB,kBAAC,EAAD,CAAUJ,SAAUoB,S,GA/ClBI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b047ea92.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.styles.css\"\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className={\"card-container\"}>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n            <h2 key={props.monster.id}>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport \"./cardlist.styles.css\"\r\nimport Card from \"../card/card.component\";\r\n\r\n\r\nconst CardList = (props) => {\r\n\r\n    return (\r\n        <div className={'card-list'}>\r\n            {props.monsters.map(monster =>\r\n                <Card key={monster.id} monster={monster}/>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport \"./searchbox.styles.css\"\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <input className=\"search\" type=\"search\" placeholder={placeholder}\r\n               onChange={handleChange}\r\n        />\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport CardList from \"./components/cardlist/cardlist.component\";\r\nimport SearchBox from \"./components/searchbox/searchbox.component\";\r\n\r\nconst url = \"http://jsonplaceholder.typicode.com/users\"\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            monsters: [],\r\n            searchField: \"\"\r\n        }\r\n\r\n        // Bind creates a new function that will force the this inside the function to be the parameter passed to bind().\r\n\r\n        //JAVASCRIPT BY DEFAULT DOESNT SET THE SCOPE OF THIS ON FUNCTIONS. YOU HAVE TO DECLARE IT EXPLICITLY.\r\n        //olo ayto to kanoume ston contructor giati trexei prwtos kai theloume na vevaiwthoume oti this anaferetai\r\n        // swsta se kathe method kai oxi ws undefined. gia na mhn ginei lathos\r\n        //in this case we want to bind this on the app component\r\n\r\n        //Otan exoume arrow functions to this mesa tous AYTOMATA ginetai bind sto meros pou kanoume declare thn\r\n        // arrow function, diladi sto context tou component px.\r\n\r\n        // this.handleChange = this.handleChange.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => this.setState({monsters: data}))\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({searchField: e.target.value})\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {monsters, searchField} = this.state;\r\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h1> Monsters Rolodex</h1>\r\n                <SearchBox\r\n                    placeholder=\"Search for Monsters\"\r\n                    handleChange={this.handleChange}/>\r\n\r\n                <CardList monsters={filteredMonsters}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}